# -*- coding: utf-8 -*-
"""LVADSUSR116_Shreyas_IA2-Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BJotGIYYXWK8F_9a7s2xufGBcnn8MBo8
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler,StandardScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.cluster import KMeans

from sklearn.metrics import silhouette_score

df = pd.read_csv('Mall_Customers.csv')

df.head()

df.drop(columns = 'CustomerID', inplace = True)

label = LabelEncoder()

df['Gender'] = label.fit_transform(df['Gender'])

for i in df.columns:
    df[i].fillna(np.mean(df[i]), inplace = True)

df.head()

df['Spending to Income ratio'] = df['Spending Score (1-100)']/df['Annual Income (k$)']

# 1 - Male, 0- Female`

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

df1 = pd.DataFrame(scaled_data, columns = df.columns)

df1

krange = list(range(1,10))
Inertia = []
Silhoutte_score = []

for k in krange:
    kmeans = KMeans(n_clusters = k, init = 'k-means++')
    kmeans.fit(scaled_data)
    Inertia.append(kmeans.inertia_)



plt.plot(krange,Inertia,marker = 'o')

silhouette_scores = []
for n_clusters in range(2, 10):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    cluster_labels = kmeans.fit_predict(scaled_data)
    silhouette_avg = silhouette_score(scaled_data, cluster_labels)
    silhouette_scores.append(silhouette_avg)

silhouette_scores



# We will take 6 clusters
kmeans_1 = KMeans(n_clusters = 6, init = 'k-means++')
kmeans_1.fit(scaled_data)

pred_labels = kmeans_1.predict(scaled_data)

pred_labels



df['Clusters'] = pred_labels

# Insights based on each cluster
df.groupby(['Clusters']).describe().transpose().round(2)

sns.scatterplot(data = df, x = 'Annual Income (k$)', y = 'Spending Score (1-100)', hue = 'Clusters')

